program = { functionDefinitionStatement |
            identifierFirstStatement |
            variableDefinitionStatement |
            ifStatement |
            fromStatement |
            printStatement |
            returnStatement  } ;

identifierFirstStatement = identifier, ( parameters | assignment ) ;

functionDefinitionStatement = "fun", identifier, parametersDeclaration, body ;
variableDefinitionStatement = "var", identifier, [ assignment ] ;
ifStatement = "if", expr, body, [ "else", body ] ;
fromStatement = "from", fromRange, fromStep, fromIterator, body ;
printStatement = "print", expr ;
returnStatement = "return", expr ;

parametersDeclaration = "(", [ identifier, { ",", identifier } ], ")" ;
body = "{", { identifierFirstStatement |
              variableDefinitionStatement |
              ifStatement |
              fromStatement |
              printStatement |
              returnStatement }, "}" ;

assignment = assignmentOperator, expr ;

fromRange = expr, "to", expr ;
fromStep = "by", "years" |
                 "months" |
                 "weeks" |
                 "days" |
                 "hours" |
                 "minutes" |
                 "seconds" ;
fromIterator = "as", identifier ;

expr = logicAndExpr, { orOperator, logicAndExpr } ;
logicAndExpr = logicEqualExpr, { andOperator, logicEqualExpr } ;
logicEqualExpr = logicRelExpr, [ ( equalOperator | notEqualOperator ) , logicRelExpr ] ;
logicRelExpr = logicTerm, [ ( greaterOperator | greaterOrEqualOperator | lessOperator | lessOrEqualOperator ), logicTerm ] ;
logicTerm = [ logicNegOperator ], mathExpr ;
mathExpr = multMathExpr, { ( plusOperator | minusOperator ), multMathExpr } ;
multMathExpr = mathTerm, { ( multiplyOperator | divisionOperator ), mathTerm } ;
mathTerm = [ mathNegOperator ], ( numberLiteral |
                                  stringLiteral |
                                  dateLiteral |
                                  timeLiteral |
                                  datetimeLiteral |
                                  timedeltaLiteral |
                                  identifierFirstValue |
                                  parenthesisedExpr ) ;

parenthesisedExpr = "(", expr, ")" ;

assignmentOperator = "=" ;
orOperator = "|" ;
andOperator = "&" ;
equalOperator = "==" ;
notEqualOperator = "!=" ;
greaterOperator = ">" ;
greaterOrEqualOperator = ">=" ;
lessOperator = "<" ;
lessOrEqualOperator = "<=" ;
logicNegOperator = "!" ;

plusOperator = "+" ;
minusOperator = "-" ;
multiplyOperator = "*" ;
divisionOperator = "/" ;
mathNegOperator = "-" ;

identifierFirstValue = identifier, [ parametersCall | ".", ( "years" |
                                                             "months" |
                                                             "weeks" |
                                                             "days" |
                                                             "hours" |
                                                             "minutes" |
                                                             "seconds" ) ] ;
parametersCall = "(", [ expr, { ",", expr } ], ")" ;

numberLiteral = "0" | ( nonZeroDigit, { digit } ) ;
stringLiteral = '"', { stringCharacter }, '"' ;
dateLiteral = two_digits, ".", two_digits, ".", four_digits ;
timeLiteral = two_digits, ":", two_digits, ":", two_digits ;
datetimeLiteral = dateLiteral, "~", timeLiteral ;
timedeltaLiteral = "'", [ numberLiteral, "Y" ], [ numberLiteral, "M" ],
                        [ numberLiteral, "W" ], [ numberLiteral, "D" ],
                        [ numberLiteral, "h" ], [ numberLiteral, "m" ],
                        [ numberLiteral, "s" ], "'" ;

identifier = nonDigitCharacter, { character } ;

nonDigitCharacter = letter | specialCharacter ;
character = nonDigitCharacter | digit ;

stringCharacter = ? all visible characters ? - '"' ;

letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" |
         "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
         "u" | "v" | "w" | "x" | "y" | "z" |
         "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" |
         "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" |
         "U" | "V" | "W" | "X" | "Y" | "Z" ;

specialCharacter = "_" ;

two_digits = 2 * digit ;
four_digits = 4 * digit ;

digit = "0" | nonZeroDigit ;
nonZeroDigit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;